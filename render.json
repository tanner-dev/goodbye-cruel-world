<<<<<<< HEAD
﻿﻿{
=======
{
>>>>>>> 3c4131da04b686d8ea163f7e71d89678b91d559c
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    //
    // Choose an existing Resource Group (If Resource Group does not exist, specify name in Pipeline Variable)
    //
    "rgCommon": {
      "defaultValue": "dev.common-deleteme",
      "type": "string"
    },
    "rgRender": {
      "defaultValue": "dev.render-deleteme",
      "type": "string"
    },
    //
    // DNS Zone *** MUST EXIST ***
    //
    "dnszone_name": {
      "defaultValue": "lazlo.io.deleteme",
      "type": "String"
    },
    //
    // CNAME Array
    //
    //"cName": {
    //  "defaultValue": [
    //    { "name": "cname_deleteme001" },
    //    { "name": "cname_deleteme002" },
    //    { "name": "cname_deleteme003" },
    //    { "name": "cname_deleteme004" },
    //    { "name": "cname_deleteme005" }
    //  ],
    //  "type": "array"
    //},
    "cName": {
      "defaultValue": "dev.render-deleteme",
      "type": "string"
    },
    "subscriptionIdGuid": {
      "defaultValue": "be4c9638-e57a-4393-a2c3-c604ccb0bb3a",
      "type": "string"
    },
    "computeLocation": {
      "defaultValue": "southcentralus",
      "type": "string"
    },
    //
    // BEGIN Traffic Manger
    //
    "trafficManagerName": {
      "defaultValue": "deleteme-devrender",
      "type": "string"
    },
    "relativeName": {
      "type": "string"
    },
    "trafficRoutingMethod": {
      "type": "string",
      "defaultValue": "Performance",
      "allowedValues": [
        "Performance",
        "Weighted",
        "Priority",
        "Geographic",
        "MultiValue",
        "Subnet"
      ]
    },
    "maxReturn": {
      "type": "int"
    },

    // END Traffic Manager

    // BEGIN Endpoints

    "endpoint_name001": {
      "defaultValue": "dev.render.southcentralus",
      "type": "String"
    },
    "endpoint_name002": {
      "defaultValue": "dev.render.northcentralus",
      "type": "String"
    },
    //"trafficManagerProfiles_name": {
    //  "defaultValue": "deleteme",
    //  "type": "string"
    //},
    "NS_@_name": {
      "defaultValue": "@",
      "type": "string"
    },
    //"publicIPAddresses_pubip001_name": {
    //  "defaultValue": "deleteme-pubip001",
    //  "type": "String"
    //},
    //"publicIPAddresses_pubip002_name": {
    //  "defaultValue": "deleteme-pubip002",
    //  "type": "String"
    //},
    "SOA_@_name": {
      "defaultValue": "@",
      "type": "string"
    },
    "trafficManagerProfiles_id": {
      "defaultValue": "/subscriptions/be4c9638-e57a-4393-a2c3-c604ccb0bb3a/resourceGroups/deleteme-dev.common/providers/Microsoft.Network/trafficManagerProfiles/deleteme-devrender/azureEndpoints/",
      "type": "String"
    },

    // END Endpoints

    "subscriptionIdGuid": {
      "defaultValue": "be4c9638-e57a-4393-a2c3-c604ccb0bb3a",
      "type": "string"
    },
    "reliabilityLevel": {
      "defaultValue": "Silver",
      "type": "string",
      "metadata": {
        "description": "silver/platinum"
      }
    },
    "clusterPurposeName": {
      "defaultValue": "render",
      "type": "string",
      "metadata": {
        "description": "render/gaming"
      }
    },
    "clusterPurposeAbreviated": {
      "defaultValue": "rndr",
      "type": "string",
      "metadata": {
        "description": "rndr/gmng"
      }
    },
    "environment": {
      "defaultValue": "devrender",
      "type": "string",
      "metadata": {
        "description": "devrender/loadrender/demorender/prorender"
      }
    },
    "clusterInstanceName": {
      "defaultValue": "primary",
      "type": "string",
      "metadata": {
        "description": "primary/secondary"
      }
    },
    "clusterInstanceAbbreviated": {
      "defaultValue": "prmry",
      "type": "string",
      "metadata": {
        "description": "prmry/scndry"
      }
    },
    "clusterApplication": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Cluster Application Id returned from keyvault application configuration"
      }
    },
    "clientApplication": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Client Application Id returned from keyvault application configuration"
      }
    },
    "applicationInsightsKey": {
      "type": "string",
      "metadata": {
        "description": "Application Insights Key"
      }
    },
    "nt0applicationStartPort": {
      "defaultValue": 20000,
      "type": "int"
    },
    "nt0applicationEndPort": {
      "defaultValue": 30000,
      "type": "int"
    },
    "nt0ephemeralStartPort": {
      "defaultValue": 49152,
      "type": "int"
    },
    "nt0ephemeralEndPort": {
      "defaultValue": 65534,
      "type": "int"
    },
    "nt0fabricTcpGatewayPort": {
      "defaultValue": 19000,
      "type": "int"
    },
    "nt0fabricHttpGatewayPort": {
      "defaultValue": 19080,
      "type": "int"
    },
    "subnet0Prefix": {
      "defaultValue": "10.0.0.0/24",
      "type": "string"
    },
    "computeLocation": {
      "type": "string"
    },
    "publicIPAddressType": {
      "defaultValue": "Dynamic",
      "allowedValues": [
        "Dynamic"
      ],
      "type": "string"
    },
    "vmStorageAccountContainerName": {
      "defaultValue": "vhds",
      "type": "string"
    },
    "addressPrefix": {
      "defaultValue": "10.0.0.0/16",
      "type": "string"
    },
    "overProvision": {
      "defaultValue": "false",
      "type": "string"
    },
    "vmImagePublisher": {
      "defaultValue": "MicrosoftWindowsServer",
      "type": "string"
    },
    "vmImageOffer": {
      "defaultValue": "WindowsServer",
      "type": "string"
    },
    "vmImageSku": {
      "defaultValue": "2016-Datacenter",
      "type": "string"
    },
    "vmImageVersion": {
      "defaultValue": "latest",
      "type": "string"
    },
    "storageAccountType": {
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Premium_LRS",
        "Standard_GRS"
      ],
      "type": "string",
      "metadata": {
        "description": "Replication option for the VM image storage account"
      }
    },
    "applicationLogStorageAccountType": {
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Premium_LRS",
        "Standard_GRS"
      ],
      "type": "string",
      "metadata": {
        "description": "Replication option for the support log storage account"
      }
    },
    "applicationDiagnosticsStorageAccountType": {
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Premium_LRS",
        "Standard_GRS"
      ],
      "type": "string",
      "metadata": {
        "description": "Replication option for the application diagnostics storage account"
      }
    },
    "nt0InstanceCount": {
      "defaultValue": 5,
      "type": "int",
      "metadata": {
        "description": "Instance count for node type"
      }
    },
    "vmNodeType0Name": {
      "type": "string"
    },
    "vmNodeType0Size": {
      "defaultValue": "Standard_D2_v2",
      "type": "string"
    },
    "vaultName": {
      "type": "string"
    },
    "vaultResourceGroup": {
      "type": "string"
    },
    "settingsCertificateName": {
      "type": "string"
    },
    "managementCertificateThumbprint": {
      "type": "string"
    },
    "lazloCertificateName": {
      "type": "string"
    },
    "osProfileAdminUserName": {
      "type": "string"
    },
    "osProfileAdminPassword": {
      "type": "securestring"
    }
  },
  "variables": {
    "dnsName": "[concat(parameters('clusterPurposeName'), parameters('environment'))]",
    "clusterName": "[concat(parameters('environment'), parameters('clusterPurposeAbreviated'), parameters('clusterInstanceAbbreviated'))]",
    "vmssApiVersion": "2017-03-30",
    "lbApiVersion": "2015-06-15",
    "vNetApiVersion": "2015-06-15",
    "storageApiVersion": "2017-10-01",
    "publicIPApiVersion": "2015-06-15",
    "applicationtLogStorageAccountName": "[concat(variables('clusterName'), 'log')]",
    "applicationDiagnosticsStorageAccountName": "[concat(variables('clusterName'), 'dgnstc')]",
    "lbName": "[concat(variables('clusterName'), 'lb')]",
    "lbIPName": "[concat(variables('lbName'), 'ip')]",
    "nicName": "[concat(variables('clusterName'), 'nic')]",
    "virtualNetworkName": "[concat(variables('clusterName'), 'vnet')]",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    //
    // IP Addresses (More Public IP Address can be added ** Looking into adding via an Array)
    "publicIPAddressRenderName": "[concat(variables('clusterName'), 'render', 'pubip')]",
    "publicIPAddressRender0": "[concat(variables('publicIPAddressRenderName'), '0')]",
    "publicIPAddressAnnotateName": "[concat(variables('clusterName'), 'annotate', 'pubip')]",
    "publicIPAddressAnnotate0": "[concat(variables('publicIPAddressAnnotateName'), '0')]",
    //
    //
    "dnsNameAnnotate": "[concat('annotate', parameters('environment'))]",
    "subnet0Name": "[concat(variables('clusterName'),'Subnet', '0')]",
    "subnet0Ref": "[concat(variables('vnetID'),'/subnets/',variables('subnet0Name'))]",
    "lbID0": "[resourceId('Microsoft.Network/loadBalancers', concat(variables('lbName')))]",
    "lbIPConfig0": "[concat(variables('lbID0'),'/frontendIPConfigurations/LoadBalancerIPConfigRender')]",
    "lbPoolID0": "[concat(variables('lbID0'),'/backendAddressPools/LoadBalancerBEAddressPool')]",
    "lbProbeID0": "[concat(variables('lbID0'),'/probes/FabricGatewayProbe')]",
    "lbHttpProbeID0": "[concat(variables('lbID0'),'/probes/FabricHttpGatewayProbe')]",
    "lbNatPoolID0": "[concat(variables('lbID0'),'/inboundNatPools/LoadBalancerBEAddressNatPool')]",
    "vmStorageAccountName0": "[toLower(concat(uniqueString(resourceGroup().id), '1', '0' ))]",
    "vaultId": "[concat('/subscriptions/be4c9638-e57a-4393-a2c3-c604ccb0bb3a/resourceGroups/',parameters('vaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/',parameters('vaultName'))]"
  },
  "resources": [
    {
      // This Nested Resource will create:
      // 1. A DNS Zone (IF one does not exist)
      // 2. A CNAME for that DNS Zone
      // 3. Public IP Address for EndPoints
      // 4. A Traffic Manager w/ EndPoints

      "apiVersion": "2017-05-10",
      "name": "nestedTemplate",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[parameters('rgCommon')]",
      "subscriptionId": "[parameters('subscriptionIdGuid')]",
      "properties": {
        "mode": "Incremental",
        "debugSetting": {
          "detailLevel": "requestContent, responseContent"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
            //
            // Create DNS Zone from scratch
            //
            //{
            //  "comments": "Generalized from resource: '/subscriptions/be4c9638-e57a-4393-a2c3-c604ccb0bb3a/resourceGroups/dnstest_cname_deleteme/providers/Microsoft.Network/dnszones/testdnsdeleteme.com'.",
            //  "type": "Microsoft.Network/dnszones",
            //  "name": "[parameters('dnszone_name')]",
            //  "apiVersion": "2018-05-01",
            //  "location": "global",
            //  "tags": {},
            //  "scale": null,
            //  "properties": {
            //    "zoneType": "Public"
            //  },
            //  "dependsOn": []
            //},
            //{
            //  "comments": "Generalized from resource: '/subscriptions/be4c9638-e57a-4393-a2c3-c604ccb0bb3a/resourceGroups/dnstest_cname_deleteme/providers/Microsoft.Network/dnszones/testdnsdeleteme.com/NS/@'.",
            //  "type": "Microsoft.Network/dnszones/NS",
            //  "name": "[concat(parameters('dnszone_name'), '/', parameters('NS_@_name'))]",
            //  "apiVersion": "2018-05-01",
            //  "scale": null,
            //  "properties": {
            //    "TTL": 172800,
            //    "NSRecords": [
            //      {
            //        "nsdname": "ns1-06.azure-dns.com."
            //      },
            //      {
            //        "nsdname": "ns2-06.azure-dns.net."
            //      },
            //      {
            //        "nsdname": "ns3-06.azure-dns.org."
            //      },
            //      {
            //        "nsdname": "ns4-06.azure-dns.info."
            //      }
            //    ],
            //    "targetResource": {}
            //  },
            //  "dependsOn": [
            //    "[concat('/subscriptions/be4c9638-e57a-4393-a2c3-c604ccb0bb3a/resourceGroups/deleteme-dev.common/providers/Microsoft.Network/dnszones/', parameters('dnszone_name'))]"
            //  ]
            //},
            //{
            //  "comments": "Generalized from resource: '/subscriptions/be4c9638-e57a-4393-a2c3-c604ccb0bb3a/resourceGroups/dnstest_cname_deleteme/providers/Microsoft.Network/dnszones/testdnsdeleteme.com/SOA/@'.",
            //  "type": "Microsoft.Network/dnszones/SOA",
            //  "name": "[concat(parameters('dnszone_name'), '/', parameters('SOA_@_name'))]",
            //  "apiVersion": "2018-05-01",
            //  "scale": null,
            //  "properties": {
            //    "TTL": 3600,
            //    "SOARecord": {
            //      "email": "azuredns-hostmaster.microsoft.com",
            //      "expireTime": 2419200,
            //      "host": "ns1-06.azure-dns.com.",
            //      "minimumTTL": 300,
            //      "refreshTime": 3600,
            //      "retryTime": 300,
            //      "serialNumber": 1
            //    },
            //    "targetResource": {}
            //  },
            //  "dependsOn": [
            //    "[concat('/subscriptions/be4c9638-e57a-4393-a2c3-c604ccb0bb3a/resourceGroups/deleteme-dev.common/providers/Microsoft.Network/dnszones/', parameters('dnszone_name'))]"
            //  ]
            //},

            // Create CNAME for DNS Zone - DNS Zone creation SHOULD already be completed

            {
              "comments": "Generalized from resource: '/subscriptions/be4c9638-e57a-4393-a2c3-c604ccb0bb3a/resourceGroups/dnstest_resources_deleteme/providers/Microsoft.Network/dnszones/deleteme.com/CNAME/testcname'.",
              "type": "Microsoft.Network/dnszones/CNAME",
              "name": "[concat(parameters('dnszone_name'), '/', parameters('cName'))]",
              "apiVersion": "2018-05-01",
              "scale": null,
              "properties": {
                "TTL": 3600,
                "CNAMERecord": {
                  "cname": "dev.render.lazlo.io"
                },
                "targetResource": {}
              },
              //
              // HARD CODED DNS ZONE
              // *** 'dependsOn' will only work and reference Resources within the same Template ***
              //
              //"dependsOn": [
              //  "[concat('/subscriptions/be4c9638-e57a-4393-a2c3-c604ccb0bb3a/resourceGroups/deleteme-dev.common/providers/Microsoft.Network/dnszones/', parameters('dnszone_name'))]"
              //]
            },
            // Public IP
            //{
            //  "comments": "Generalized from resource: '/subscriptions/be4c9638-e57a-4393-a2c3-c604ccb0bb3a/resourceGroups/DNSTest_Cname_DELETEME/providers/Microsoft.Network/publicIPAddresses/deleteme.pubip'.",
            //  "type": "Microsoft.Network/publicIPAddresses",
            //  "sku": {
            //    "name": "Basic",
            //    "tier": "Regional"
            //  },
            //  "name": "[parameters('publicIPAddresses_pubip001_name')]",
            //  "apiVersion": "2018-08-01",
            //  "location": "southcentralus",
            //  "scale": null,
            //  "properties": {
            //    "provisioningState": "Succeeded",
            //    "resourceGuid": "7d7340f6-60a9-4a3d-b8b3-90271bfb56f4",
            //    "publicIPAddressVersion": "IPv4",
            //    "publicIPAllocationMethod": "Dynamic",
            //    "idleTimeoutInMinutes": 4,
            //    "dnsSettings": {
            //      "domainNameLabel": "deleteme-pubip001",
            //      "fqdn": "deleteme-pubip001.southcentralus.cloudapp.azure.com"
            //    }
            //  }
            //},
            //{
            //  "comments": "Generalized from resource: '/subscriptions/be4c9638-e57a-4393-a2c3-c604ccb0bb3a/resourceGroups/DNSTest_Cname_DELETEME/providers/Microsoft.Network/publicIPAddresses/deleteme.pubip'.",
            //  "type": "Microsoft.Network/publicIPAddresses",
            //  "sku": {
            //    "name": "Basic",
            //    "tier": "Regional"
            //  },
            //  "name": "[parameters('publicIPAddresses_pubip002_name')]",
            //  "apiVersion": "2018-08-01",
            //  "location": "southcentralus",
            //  "scale": null,
            //  "properties": {
            //    "provisioningState": "Succeeded",
            //    "resourceGuid": "15d0e711-65cd-458e-ae59-57ff95b02ce7",
            //    "publicIPAddressVersion": "IPv4",
            //    "publicIPAllocationMethod": "Dynamic",
            //    "idleTimeoutInMinutes": 4,
            //    "dnsSettings": {
            //      "domainNameLabel": "deleteme-pubip002",
            //      "fqdn": "deleteme-pubip002.southcentralus.cloudapp.azure.com"
            //    }
            //  }
            //},
            // Next: Add an EndPoint to a Traffic Manager
            {
              "apiVersion": "2018-04-01",
              "type": "Microsoft.Network/trafficmanagerprofiles",
              "name": "[parameters('trafficManagerName')]",
              "location": "global",
              "properties": {
                "trafficRoutingMethod": "[parameters('trafficRoutingMethod')]",
                "maxReturn": "[parameters('maxReturn')]",
                "dnsConfig": {
                  "relativeName": "[parameters('relativeName')]",
                  "ttl": "60"
                },
                "monitorConfig": {
                  "protocol": "http",
                  "port": "80",
                  "path": "/"
                },
                "endpoints": [
                  {
                    // EndPoint ties into 'publicIPAddressRender0'
                    "id": "[concat(parameters('trafficManagerProfiles_id'), parameters('endpoint_name001'))]",
                    "name": "[parameters('endpoint_name001')]",
                    "type": "Microsoft.Network/trafficManagerProfiles/azureEndpoints",
                    "properties": {
                      "endpointStatus": "Enabled",
                      "endpointMonitorStatus": null,
                      "targetResourceId": "[resourceId(parameters('rgRender'), 'Microsoft.Network/publicIPAddresses', variables('publicIPAddressRender0'))]",
                      "target": "[concat(parameters('trafficManagerName'), variables('publicIPAddressRender0'), '.southcentralus.cloudapp.azure.com')]",
                      "weight": 1,
                      "priority": 1,
                      "endpointLocation": "South Central US"
                    }
                  },
                  {
                    // EndPoint ties into 'publicIPAddressAnnotate0'
                    "id": "[concat(parameters('trafficManagerProfiles_id'), parameters('endpoint_name002'))]",
                    "name": "[parameters('endpoint_name002')]",
                    "type": "Microsoft.Network/trafficManagerProfiles/azureEndpoints",
                    "properties": {
                      "endpointStatus": "Enabled",
                      "endpointMonitorStatus": null,
                      "targetResourceId": "[resourceId(parameters('rgRender'), 'Microsoft.Network/publicIPAddresses',  variables('publicIPAddressAnnotate0'))]",
                      "target": "[concat(parameters('trafficManagerName'), variables('publicIPAddressAnnotate0'), '.southcentralus.cloudapp.azure.com')]",
                      "weight": 1,
                      "priority": 2,
                      "endpointLocation": "South Central US"
                    }
                  }
                ],
                "trafficViewEnrollmentStatus": "Disabled"
              },
              "dependsOn": [
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[concat('/subscriptions/be4c9638-e57a-4393-a2c3-c604ccb0bb3a/resourceGroups/deleteme-dev.render/providers/Microsoft.Network/publicIPAddresses/', concat(variables('publicIPAddressRender0')))]",
        "[concat('/subscriptions/be4c9638-e57a-4393-a2c3-c604ccb0bb3a/resourceGroups/deleteme-dev.render/providers/Microsoft.Network/publicIPAddresses/', concat(variables('publicIPAddressAnnotate0')))]"
      ]
    },
    //
    // ORIGINAL 'sfcrndr.json' Resource are BELOW
    //
    {
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2015-01-01",
      "name": "[concat(resourceGroup().name, 'opslock')]",
      "properties": {
        "level": "ReadOnly",
        "notes": "WARNING: This resource is generated via ARM templates. You have no reason to modify or delete the configuration. Contact operations@lazlo.io for action on this resource. If you make an unauthorized change, you will be terminated for cause. No exceptions."
      },
      "dependsOn": [
        "[concat('Microsoft.ServiceFabric/clusters/', variables('clusterName'))]",
        "[concat('Microsoft.Compute/virtualMachineScaleSets/', variables('clusterName'), 'vmss', parameters('vmNodeType0Name'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "sku": {
        "name": "[parameters('applicationLogStorageAccountType')]"
      },
      "kind": "Storage",
      "name": "[variables('applicationtLogStorageAccountName')]",
      "apiVersion": "[variables('storageApiVersion')]",
      "location": "[parameters('computeLocation')]",
      "tags": {
        "displayName": "logs",
        "environment": "[parameters('environment')]",
        "resourceType": "Service Fabric",
        "clusterName": "[variables('clusterName')]"
      },
      "properties": {},
      "dependsOn": []
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "sku": {
        "name": "[parameters('applicationDiagnosticsStorageAccountType')]"
      },
      "kind": "Storage",
      "name": "[variables('applicationDiagnosticsStorageAccountName')]",
      "apiVersion": "[variables('storageApiVersion')]",
      "location": "[parameters('computeLocation')]",
      "tags": {
        "displayName": "diagnostics",
        "environment": "[parameters('environment')]",
        "resourceType": "Service Fabric",
        "clusterName": "[variables('clusterName')]"
      },
      "properties": {},
      "dependsOn": []
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "apiVersion": "[variables('vNetApiVersion')]",
      "location": "[parameters('computeLocation')]",
      "tags": {
        "environment": "[parameters('environment')]",
        "resourceType": "Service Fabric",
        "clusterName": "[variables('clusterName')]"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnet0Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet0Prefix')]"
            }
          }
        ]
      },
      "dependsOn": []
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressRender0')]",
      "apiVersion": "[variables('publicIPApiVersion')]",
      "location": "[parameters('computeLocation')]",
      "tags": {
        "environment": "[parameters('environment')]",
        "resourceType": "Service Fabric",
        "clusterName": "[variables('clusterName')]"
      },
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[variables('dnsName')]"
        },
        "publicIPAllocationMethod": "Dynamic"
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressAnnotate0')]",
      "apiVersion": "[variables('publicIPApiVersion')]",
      "location": "[parameters('computeLocation')]",
      "tags": {
        "environment": "[parameters('environment')]",
        "resourceType": "Service Fabric",
        "clusterName": "[variables('clusterName')]"
      },
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[variables('dnsNameAnnotate')]"
        },
        "publicIPAllocationMethod": "Dynamic"
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('lbName')]",
      "apiVersion": "[variables('lbApiVersion')]",
      "location": "[parameters('computeLocation')]",
      "tags": {
        "environment": "[parameters('environment')]",
        "resourceType": "Service Fabric",
        "clusterName": "[variables('clusterName')]"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerIPConfigRender",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressRender0'))]"
              }
            }
          },
          {
            "name": "LoadBalancerIPConfigAnnotate",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressAnnotate0'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "LoadBalancerBEAddressPool",
            "properties": {}
          }
        ],
        "loadBalancingRules": [
          {
            "name": "FabricDeployRule",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('lbPoolID0')]"
              },
              "backendPort": "[parameters('nt0fabricTcpGatewayPort')]",
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('lbIPConfig0')]"
              },
              "frontendPort": "[parameters('nt0fabricTcpGatewayPort')]",
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('lbProbeID0')]"
              },
              "protocol": "Tcp"
            }
          },
          {
            "name": "FabricManagementHttpRule",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('lbPoolID0')]"
              },
              "backendPort": "[parameters('nt0fabricHttpGatewayPort')]",
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('lbIPConfig0')]"
              },
              "frontendPort": "[parameters('nt0fabricHttpGatewayPort')]",
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('lbHttpProbeID0')]"
              },
              "protocol": "Tcp"
            }
          },
          //{
          //  "name": "[concat('publichttpsrule', parameters('clusterPurposeName'))]",
          //  "properties": {
          //    "backendAddressPool": {
          //      "id": "[variables('lbPoolID0')]"
          //    },
          //    "backendPort": 8443,
          //    "enableFloatingIP": false,
          //    "frontendIPConfiguration": {
          //      "id": "[variables('lbIPConfig0')]"
          //    },
          //    "frontendPort": 443,
          //    "loadDistribution": "SourceIPProtocol",
          //    "idleTimeoutInMinutes": 15,
          //    "probe": {
          //      "id": "[variables('lbHttpProbeID0')]"
          //    },
          //    "protocol": "Tcp"
          //  }
          //},
          {
            "name": "AnnotatorHttpsRule",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('lbPoolID0')]"
              },
              "backendPort": 9443,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('lbIPConfig0')]"
              },
              "frontendPort": 443,
              "loadDistribution": "SourceIPProtocol",
              "idleTimeoutInMinutes": 15,
              "probe": {
                "id": "[variables('lbHttpProbeID0')]"
              },
              "protocol": "Tcp"
            }
          },
          {
            "name": "AnnotatorHttpRule",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('lbPoolID0')]"
              },
              "backendPort": 8080,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('lbIPConfig0')]"
              },
              "frontendPort": 80,
              "loadDistribution": "SourceIPProtocol",
              "idleTimeoutInMinutes": 15,
              "probe": {
                "id": "[variables('lbHttpProbeID0')]"
              },
              "protocol": "Tcp"
            }
          },
          {
            "name": "RenderHttpRule",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('lbPoolID0')]"
              },
              "backendPort": 7502,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('lbIPConfig0')]"
              },
              "frontendPort": 7502,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('lbHttpProbeID0')]"
              },
              "protocol": "Tcp"
            }
          }
        ],
        "probes": [
          {
            "name": "FabricGatewayProbe",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[parameters('nt0fabricTcpGatewayPort')]",
              "protocol": "Tcp"
            }
          },
          {
            "name": "FabricHttpGatewayProbe",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[parameters('nt0fabricHttpGatewayPort')]",
              "protocol": "Tcp"
            }
          }
        ],
        "inboundNatPools": [
          {
            "name": "LoadBalancerBEAddressNatPool",
            "properties": {
              "backendPort": 3389,
              "frontendIPConfiguration": {
                "id": "[variables('lbIPConfig0')]"
              },
              "frontendPortRangeEnd": 4500,
              "frontendPortRangeStart": 3389,
              "protocol": "Tcp"
            }
          }
        ]
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressRender0'))]",
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressAnnotate0'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "sku": {
        "name": "[parameters('vmNodeType0Size')]",
        "capacity": "[parameters('nt0InstanceCount')]",
        "tier": "Standard"
      },
      "name": "[concat(variables('clusterName'), 'vmss', parameters('vmNodeType0Name'))]",
      "apiVersion": "[variables('vmssApiVersion')]",
      "location": "[parameters('computeLocation')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "tags": {
        "environment": "[parameters('environment')]",
        "resourceType": "Service Fabric",
        "clusterName": "[variables('clusterName')]"
      },
      "properties": {
        "overprovision": "[parameters('overProvision')]",
        "upgradePolicy": {
          "mode": "Automatic"
        },
        "virtualMachineProfile": {
          "extensionProfile": {
            "extensions": [
              {
                "name": "[concat('ServiceFabricNode-', parameters('vmNodeType0Name'))]",
                "properties": {
                  "type": "ServiceFabricNode",
                  "autoUpgradeMinorVersion": true,
                  "protectedSettings": {
                    "StorageAccountKey1": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('applicationtLogStorageAccountName')),'2015-05-01-preview').key1]",
                    "StorageAccountKey2": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('applicationtLogStorageAccountName')),'2015-05-01-preview').key2]"
                  },
                  "publisher": "Microsoft.Azure.ServiceFabric",
                  "settings": {
                    "clusterEndpoint": "[reference(variables('clusterName')).clusterEndpoint]",
                    "nodeTypeRef": "[parameters('vmNodeType0Name')]",
                    "dataPath": "D:\\\\SvcFab",
                    "durabilityLevel": "Silver",
                    "enableParallelJobs": true,
                    "nicPrefixOverride": "[parameters('subnet0Prefix')]",
                    "certificate": {
                      "thumbprint": "[parameters('managementCertificateThumbprint')]",
                      "x509StoreName": "My"
                    }
                  },
                  "typeHandlerVersion": "1.0"
                }
              },
              {
                "name": "[concat('VMDiagnosticsVmExt-', parameters('vmNodeType0Name'))]",
                "properties": {
                  "type": "IaaSDiagnostics",
                  "autoUpgradeMinorVersion": true,
                  "protectedSettings": {
                    "storageAccountName": "[variables('applicationDiagnosticsStorageAccountName')]",
                    "storageAccountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('applicationDiagnosticsStorageAccountName')),'2015-05-01-preview').key1]",
                    "storageAccountEndPoint": "https://core.windows.net/"
                  },
                  "publisher": "Microsoft.Azure.Diagnostics",
                  "settings": {
                    "WadCfg": {
                      "DiagnosticMonitorConfiguration": {
                        "overallQuotaInMB": "50000",
                        "sinks": "applicationInsights",
                        "EtwProviders": {
                          "EtwEventSourceProviderConfiguration": [
                            {
                              "provider": "Microsoft-ServiceFabric-Actors",
                              "scheduledTransferKeywordFilter": "1",
                              "scheduledTransferPeriod": "PT5M",
                              "DefaultEvents": {
                                "eventDestination": "ServiceFabricReliableActorEventTable"
                              }
                            },
                            {
                              "provider": "Microsoft-ServiceFabric-Services",
                              "scheduledTransferPeriod": "PT5M",
                              "DefaultEvents": {
                                "eventDestination": "ServiceFabricReliableServiceEventTable"
                              }
                            }
                          ],
                          "EtwManifestProviderConfiguration": [
                            {
                              "provider": "cbd93bc2-71e5-4566-b3a7-595d8eeca6e8",
                              "scheduledTransferLogLevelFilter": "Information",
                              "scheduledTransferKeywordFilter": "4611686018427387904",
                              "scheduledTransferPeriod": "PT5M",
                              "DefaultEvents": {
                                "eventDestination": "ServiceFabricSystemEventTable"
                              }
                            }
                          ]
                        }
                      },
                      "SinksConfig": {
                        "Sink": [
                          {
                            "name": "applicationInsights",
                            "ApplicationInsights": "[parameters('applicationInsightsKey')]"
                          }
                        ]
                      }
                    },
                    "StorageAccount": "[variables('applicationDiagnosticsStorageAccountName')]"
                  },
                  "typeHandlerVersion": "1.5"
                }
              },
              {
                "name": "LazloMasterScript",
                "properties": {
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "fileUris": [
                      "https://lazlo326.blob.core.windows.net/vmscripts/InstallNetFx472.ps1",
                      "https://lazlo326.blob.core.windows.net/vmscripts/SetEnvironmentVariable.ps1",
                      "https://lazlo326.blob.core.windows.net/vmscripts/Master.ps1"
                    ],
                    "commandToExecute": "[concat('powershell -NonInteractive -ExecutionPolicy Bypass -File Master.ps1 ActiveConfiguration ', parameters('environment'))]"
                  },
                  "publisher": "Microsoft.Compute",
                  "type": "CustomScriptExtension",
                  "typeHandlerVersion": "1.4"
                }
              }
            ]
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[concat(variables('nicName'), '-0')]",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "[concat(variables('nicName'),'-',0)]",
                      "properties": {
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[variables('lbPoolID0')]"
                          }
                        ],
                        "loadBalancerInboundNatPools": [
                          {
                            "id": "[variables('lbNatPoolID0')]"
                          }
                        ],
                        "subnet": {
                          "id": "[variables('subnet0Ref')]"
                        }
                      }
                    }
                  ],
                  "primary": true
                }
              }
            ]
          },
          "osProfile": {
            "adminUsername": "[parameters('osProfileAdminUserName')]",
            "adminPassword": "[concat(parameters('osProfileAdminPassword'))]",
            "computernamePrefix": "[parameters('vmNodeType0Name')]",
            "secrets": [
              {
                "sourceVault": {
                  "id": "[variables('vaultId')]"
                },
                "vaultCertificates": [
                  {
                    "certificateUrl": "[parameters('settingsCertificateName')]",
                    "certificateStore": "My"
                  },
                  {
                    "certificateUrl": "[parameters('lazloCertificateName')]",
                    "certificateStore": "My"
                  }
                ]
              }
            ]
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "[parameters('vmImagePublisher')]",
              "offer": "[parameters('vmImageOffer')]",
              "sku": "[parameters('vmImageSku')]",
              "version": "[parameters('vmImageVersion')]"
            },
            "osDisk": {
              "caching": "ReadOnly",
              "createOption": "FromImage",
              "managedDisk": {
                "storageAccountType": "[parameters('storageAccountType')]"
              }
            },
            "dataDisks": [
              {
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 256,
                "lun": 2,
                "managedDisk": {
                  "storageAccountType": "Standard_LRS"
                }
              }
            ]
          }
        }
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('lbName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('applicationtLogStorageAccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('applicationDiagnosticsStorageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.ServiceFabric/clusters",
      "name": "[variables('clusterName')]",
      "apiVersion": "2017-07-01-preview",
      "location": "[parameters('computeLocation')]",
      "tags": {
        "environment": "[parameters('environment')]",
        "resourceType": "Service Fabric",
        "clusterName": "[variables('clusterName')]"
      },
      "properties": {
        "addonFeatures": [
          "DnsService"
        ],
        "clientCertificateCommonNames": [],
        "clientCertificateThumbprints": [],
        "diagnosticsStorageAccountConfig": {
          "protectedAccountKeyName": "StorageAccountKey1",
          "storageAccountName": "[variables('applicationtLogStorageAccountName')]",
          "blobEndpoint": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('applicationtLogStorageAccountName')), '2017-10-01').primaryEndpoints['blob']]",
          "queueEndpoint": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('applicationtLogStorageAccountName')), '2017-10-01').primaryEndpoints['queue']]",
          "tableEndpoint": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('applicationtLogStorageAccountName')), '2017-10-01').primaryEndpoints['table']]"
        },
        "fabricSettings": [],
        "managementEndpoint": "[concat('https://',variables('dnsName'),'.sf.lazlo.io:',parameters('nt0fabricHttpGatewayPort'))]",
        "nodeTypes": [
          {
            "name": "[parameters('vmNodeType0Name')]",
            "applicationPorts": {
              "endPort": "[parameters('nt0applicationEndPort')]",
              "startPort": "[parameters('nt0applicationStartPort')]"
            },
            "clientConnectionEndpointPort": "[parameters('nt0fabricTcpGatewayPort')]",
            "durabilityLevel": "Silver",
            "ephemeralPorts": {
              "endPort": "[parameters('nt0ephemeralEndPort')]",
              "startPort": "[parameters('nt0ephemeralStartPort')]"
            },
            "httpGatewayEndpointPort": "[parameters('nt0fabricHttpGatewayPort')]",
            "isPrimary": true,
            "vmInstanceCount": "[parameters('nt0InstanceCount')]"
          }
        ],
        "provisioningState": "Default",
        "reliabilityLevel": "[parameters('reliabilityLevel')]",
        "upgradeMode": "Manual",
        "vmImage": "Windows",
        "certificate": {
          "thumbprint": "[parameters('managementCertificateThumbprint')]",
          "x509StoreName": "My"
        },
        "azureActiveDirectory": {
          "tenantId": "96fb6ace-8227-4453-97e3-0eac201452e0",
          "clusterApplication": "[parameters('clusterApplication')]",
          "clientApplication": "[parameters('clientApplication')]"
        }
      },
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('applicationtLogStorageAccountName'))]"
      ]
    }
  ],
  "outputs": {
    "clusterProperties": {
      "type": "object",
      "value": "[reference(variables('clusterName'))]"
    }
  }
}
